<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.casemng.repository.CaseMapper">

	<select id="count" resultType="Long">
		SELECT
			count(distinct id)
    	FROM
        	(
            SELECT
                cases.*,
                customer.id as cust_id,
                customer.last_name as cust_last_name,
                customer.first_name as cust_first_name,
                orders.id as order_id,
                quotation.id as quot_id,
                inquiry.id as inqu_id,
                CASE 
                    WHEN cases.shipping_status = 1 THEN '支払待ち'
                    WHEN cases.shipping_status = 2 THEN '発送待ち'
                    WHEN cases.shipping_status = 3 THEN '発送済み'
                    WHEN cases.shipping_status = 4 THEN 'キャンセル'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NOT NULL) THEN '受注'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NULL AND quotation.id IS NOT NULL) THEN '見積'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NULL AND quotation.id IS NULL AND inquiry.id IS NOT NULL) THEN '問い合わせ'
                    ELSE ''
                END AS status
            FROM
                cases
                LEFT JOIN customer on cases.customer_id = customer.id
                LEFT JOIN orders on cases.id = orders.case_id AND orders.is_deleted = 0
                LEFT JOIN quotation on cases.id = quotation.case_id AND quotation.is_deleted = 0
                LEFT JOIN inquiry ON cases.id = inquiry.case_id AND inquiry.is_deleted = 0
            WHERE
                cases.is_deleted = 0 
                AND (orders.is_deleted = 0 OR orders.is_deleted IS NULL)
                AND (quotation.is_deleted = 0 OR quotation.is_deleted IS NULL)
                AND (inquiry.is_deleted = 0 OR inquiry.is_deleted IS NULL)
                AND customer.is_deleted = 0
        ) AS subquery
    	WHERE
        	concat(subquery.id, subquery.case_name, subquery.cust_last_name, subquery.cust_first_name, subquery.status) LIKE concat('%', #{searchKey}, '%')
	</select>

	<select id="findAll" resultMap="case">
		select
		cases.id,
		cases.case_name,
		cases.customer_id,
		cases.case_date,
		cases.shipping_status,
		cases.shipping_stock_flg,
		cases.memo,

		customer.id as cust_id,
		customer.last_name as cust_last_name,
		customer.first_name as
		cust_first_name,
		customer.zipcode as cust_zipcode,
		customer.address as
		cust_address,
		customer.phone_number as cust_phone_number,

		orders.id as
		order_id,
		orders.order_date as order_date,

		quotation.id AS quot_id,
		quotation.case_id AS quot_case_id,

		inquiry.id as inqu_id,
		inquiry.inquiry_date as inqu_date,
		inquiry.contents as inqu_contents

		from
		cases
		LEFT JOIN customer on cases.customer_id = customer.id
		LEFT
		JOIN orders on cases.id = orders.case_id AND orders.is_deleted = 0
		LEFT JOIN quotation on cases.id = quotation.case_id AND
		quotation.is_deleted = 0
		LEFT JOIN inquiry ON cases.id =
		inquiry.case_id AND inquiry.is_deleted = 0
		where
		cases.is_deleted = 0
		AND customer.is_deleted = 0
		AND (orders.is_deleted = 0 OR
		orders.is_deleted IS NULL)
		AND (quotation.is_deleted = 0 OR
		quotation.is_deleted IS NULL)
		AND (inquiry.is_deleted = 0 OR
		inquiry.is_deleted IS NULL)
	</select>

	<select id="findByKeyword" resultMap="caseList">
	SELECT distinct
        id,
        case_name,
        customer_id,
        case_date,
        status,
        shipping_stock_flg,
        cust_id,
        cust_last_name,
        cust_first_name
    FROM
        (
            SELECT
                cases.*,
                customer.id as cust_id,
                customer.last_name as cust_last_name,
                customer.first_name as cust_first_name,
                orders.id as order_id,
                quotation.id as quot_id,
                inquiry.id as inqu_id,
                CASE
                    WHEN cases.shipping_status = 1 THEN '支払待ち'
                    WHEN cases.shipping_status = 2 THEN '発送待ち'
                    WHEN cases.shipping_status = 3 THEN '発送済み'
                    WHEN cases.shipping_status = 4 THEN 'キャンセル'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NOT NULL) THEN '受注'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NULL AND quotation.id IS NOT NULL) THEN '見積'
                    WHEN (cases.shipping_status = 0 AND orders.id IS NULL AND quotation.id IS NULL AND inquiry.id IS NOT NULL) THEN '問い合わせ'
                    ELSE ''
                END AS status
            FROM
                cases
                LEFT JOIN customer on cases.customer_id = customer.id
                LEFT JOIN orders on cases.id = orders.case_id AND orders.is_deleted = 0
                LEFT JOIN quotation on cases.id = quotation.case_id AND quotation.is_deleted = 0
                LEFT JOIN inquiry ON cases.id = inquiry.case_id AND inquiry.is_deleted = 0
            WHERE
                cases.is_deleted = 0 
                AND (orders.is_deleted = 0 OR orders.is_deleted IS NULL)
                AND (quotation.is_deleted = 0 OR quotation.is_deleted IS NULL)
                AND (inquiry.is_deleted = 0 OR inquiry.is_deleted IS NULL)
                AND customer.is_deleted = 0
        ) AS subquery
    WHERE
        concat(subquery.id, subquery.case_name, subquery.cust_last_name, subquery.cust_first_name, subquery.status) LIKE concat('%', #{searchKey}, '%')
		<choose>
            <when test="!pageable.sort.isEmpty()">
                ORDER BY
                <foreach item="order" collection="pageable.sort" separator=",">
                    ${order.property}
                    ${order.direction}
                </foreach>
            </when>
            <otherwise>
                ORDER BY id
            </otherwise>
        </choose>
	</select>

	<select id="findById" resultMap="case">
		select
		cases.id,
		cases.case_name,
		cases.customer_id,
		cases.case_date,
		cases.shipping_status,
		cases.shipping_stock_flg,
		cases.memo,

		orders.id as order_id
		from
		cases
		LEFT JOIN orders ON cases.id = orders.case_id AND
		orders.is_deleted = 0
		where
		cases.id = #{id}
		and cases.is_deleted = 0
	</select>

	<update id="caseEdit">
		update cases
		set
		case_name = #{caseName},
		case_date =
		#{caseDate},
		shipping_status = #{shippingStatus},
		memo = #{memo}
		where
		id
		= #{id}
	</update>

	<update id="logicalDelete">
		update cases
		set
		is_deleted = 1
		where
		id = #{id}
	</update>

	<update id="whenDeleteOrder">
		update cases
		set
		shipping_status = 0
		where
		id = #{id}
	</update>

	<update id="editShippingStockFlg">
		update cases
		set
		shipping_stock_flg = 1
		where
		id = #{id}
	</update>

	<insert id="create" useGeneratedKeys="true" keyProperty="id">
		insert
		into cases(
		case_name,
		customer_id,
		case_date,
		memo
		)values(
		#{caseName},
		#{customerId},
		#{caseDate},
		#{memo}
		)
	</insert>

	<resultMap type="com.example.casemng.model.entity.Case" id="case">
		<id property="id" column="id" />
		<result property="caseName" column="case_name" />
		<result property="customerId" column="customer_id" />
		<result property="caseDate" column="case_date" />
		<result property="shippingStatus" column="shipping_status" />
		<result property="shippingStockFlg" column="shipping_stock_flg" />
		<result property="memo" column="memo" />
		<result property="isDeleted" column="is_deleted" />
		<association property="customer" resultMap="cust"
			columnPrefix="cust_" />
		<association property="order" resultMap="order"
			columnPrefix="order_" />
		<collection property="quotation" resultMap="quot"
			columnPrefix="quot_" />
		<collection property="inquiry" resultMap="inqu"
			columnPrefix="inqu_" />
	</resultMap>
	
	<resultMap type="com.example.casemng.model.entity.CaseForList" id="caseList">
		<id property="id" column="id" />
		<result property="caseName" column="case_name" />
		<result property="customerId" column="customer_id" />
		<result property="caseDate" column="case_date" />
		<result property="status" column="status" />
		<result property="shippingStockFlg" column="shipping_stock_flg" />
		<association property="customer" resultMap="cust"
			columnPrefix="cust_" />
		<association property="order" resultMap="order"
			columnPrefix="order_" />
		<collection property="quotation" resultMap="quot"
			columnPrefix="quot_" />
		<collection property="inquiry" resultMap="inqu"
			columnPrefix="inqu_" />
	</resultMap>

	<resultMap type="com.example.casemng.model.entity.Customer"
		id="cust">
		<id property="id" column="id" />
		<result property="lastName" column="last_name" />
		<result property="firstName" column="first_name" />
		<result property="zipcode" column="zipcode" />
		<result property="address" column="address" />
		<result property="phoneNumber" column="phone_number" />
		<result property="memo" column="memo" />
	</resultMap>

	<resultMap type="com.example.casemng.model.entity.Order" id="order">
		<id property="id" column="id" />
		<result property="orderDate" column="order_date" />
		<result property="memo" column="memo" />
	</resultMap>

	<resultMap type="com.example.casemng.model.entity.Product"
		id="prdu">
		<id property="id" column="id" />
		<result property="productName" column="product_name" />
		<result property="productCategoryId"
			column="product_category_id" />
		<result property="price" column="price" />
		<result property="stock" column="stock" />
		<result property="choose" column="is_choose" />
	</resultMap>

	<resultMap type="com.example.casemng.model.entity.Quotation"
		id="quot">
		<id property="id" column="id" />
		<result property="quotationDate" column="quotation_date" />
		<result property="memo" column="memo" />
	</resultMap>

	<resultMap type="com.example.casemng.model.entity.Inquiry"
		id="inqu">
		<id property="id" column="id" />
		<result property="inquiryDate" column="inququiry_date" />
		<result property="contents" column="contents" />
	</resultMap>

</mapper>